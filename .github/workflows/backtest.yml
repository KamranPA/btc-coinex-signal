name: Run Backtest

on:
  workflow_dispatch:
    inputs:
      symbol:
        type: string
        description: Symbol (e.g., BTC-USDT)
        required: true
        default: BTC-USDT
      timeframe:
        type: string
        description: Timeframe (e.g., 1h, 15m)
        required: true
        default: 1h
      start_date:
        type: string
        description: Start date (YYYY-MM-DD)
        required: true
        default: 2024-01-01
      end_date:
        type: string
        description: End date (YYYY-MM-DD)
        required: true
        default: 2024-06-01

jobs:
  backtest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install ccxt pandas numpy python-telegram-bot

      - name: Generate config.py
        env:
          SYMBOL: ${{ github.event.inputs.symbol }}
          TIMEFRAME: ${{ github.event.inputs.timeframe }}
          START_DATE: ${{ github.event.inputs.start_date }}
          END_DATE: ${{ github.event.inputs.end_date }}
        run: |
          # تبدیل BTC-USDT به BTC/USDT
          FORMATTED_SYMBOL=$(echo "$SYMBOL" | sed 's/-/\//')
          
          echo "SYMBOL = \"$FORMATTED_SYMBOL\"" > config.py
          echo "TIMEFRAME = \"$TIMEFRAME\"" >> config.py
          echo "START_DATE = \"$START_DATE\"" >> config.py
          echo "END_DATE = \"$END_DATE\"" >> config.py
          echo "" >> config.py
          echo "TELEGRAM_TOKEN = \"\$TELEGRAM_TOKEN\"" >> config.py
          echo "TELEGRAM_CHAT_ID = \"\$TELEGRAM_CHAT_ID\"" >> config.py
          echo "" >> config.py
          echo "SENSITIVITY = 2.4" >> config.py
          echo "STUNER = 10" >> config.py
          echo "MSTUNER = 8" >> config.py
          echo "FILTER_STYLE = \"Trending Signals [Mode]\"" >> config.py
          
          # نمایش محتوای فایل برای دیباگ
          cat config.py

      - name: Run backtest
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: python main.py

      - name: Upload results
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: trades
          path: results/trades.csv
