name: CoinEx Signal Bot - Production

on:
  schedule:
    - cron: '*/15 * * * *'  # هر 15 دقیقه اجرا شود
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (no real signals)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  run-signal-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests python-dotenv ta-lib

    - name: Debug API data format
      run: |
        echo "=== Debugging API Data Format ==="
        
        echo "#!/usr/bin/env python3" > debug_api.py
        echo "import json" >> debug_api.py
        echo "import logging" >> debug_api.py
        echo "logging.basicConfig(level=logging.INFO)" >> debug_api.py
        echo "logger = logging.getLogger(__name__)" >> debug_api.py
        echo "" >> debug_api.py
        echo "def debug_api():" >> debug_api.py
        echo "    try:" >> debug_api.py
        echo "        from services.coinex_api import CoinExAPI" >> debug_api.py
        echo "" >> debug_api.py
        echo "        api = CoinExAPI()" >> debug_api.py
        echo "        logger.info(\"Testing API data retrieval for BTCUSDT...\")" >> debug_api.py
        echo "" >> debug_api.py
        echo "        # تست دریافت داده بازار" >> debug_api.py
        echo "        market_data = api.get_market_data('BTCUSDT')" >> debug_api.py
        echo "        logger.info(f\"Market data type: {type(market_data)}\")" >> debug_api.py
        echo "        logger.info(f\"Market data: {market_data}\")" >> debug_api.py
        echo "" >> debug_api.py
        echo "        # بررسی ساختار داده" >> debug_api.py
        echo "        if isinstance(market_data, dict):" >> debug_api.py
        echo "            logger.info(\"Market data is a dictionary\")" >> debug_api.py
        echo "            for key, value in market_data.items():" >> debug_api.py
        echo "                logger.info(f\"Key: {key}, Type: {type(value)}, Value: {value}\")" >> debug_api.py
        echo "        elif isinstance(market_data, list):" >> debug_api.py
        echo "            logger.info(f\"Market data is a list with {len(market_data)} items\")" >> debug_api.py
        echo "            for i, item in enumerate(market_data[:3]):  # فقط 3 آیتم اول" >> debug_api.py
        echo "                logger.info(f\"Item {i}: {item}\")" >> debug_api.py
        echo "        else:" >> debug_api.py
        echo "            logger.info(f\"Market data is of type: {type(market_data)}\")" >> debug_api.py
        echo "" >> debug_api.py
        echo "        # تست چند symbol مختلف" >> debug_api.py
        echo "        symbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT']" >> debug_api.py
        echo "        for symbol in symbols:" >> debug_api.py
        echo "            try:" >> debug_api.py
        echo "                data = api.get_market_data(symbol)" >> debug_api.py
        echo "                logger.info(f\"{symbol} data type: {type(data)}\")" >> debug_api.py
        echo "                if isinstance(data, dict) and 'data' in data:" >> debug_api.py
        echo "                    logger.info(f\"{symbol} has 'data' key: {type(data['data'])}\")" >> debug_api.py
        echo "            except Exception as e:" >> debug_api.py
        echo "                logger.warning(f\"Failed to get {symbol} data: {e}\")" >> debug_api.py
        echo "" >> debug_api.py
        echo "        return True" >> debug_api.py
        echo "    " >> debug_api.py
        echo "    except Exception as e:" >> debug_api.py
        echo "        logger.error(f\"Error in debug: {e}\")" >> debug_api.py
        echo "        import traceback" >> debug_api.py
        echo "        logger.error(traceback.format_exc())" >> debug_api.py
        echo "        return False" >> debug_api.py
        echo "" >> debug_api.py
        echo "if __name__ == \"__main__\":" >> debug_api.py
        echo "    debug_api()" >> debug_api.py
        
        echo "Running API debug..."
        python debug_api.py

    - name: Create fixed main.py
      run: |
        echo "=== Creating Fixed Main.py ==="
        
        echo "#!/usr/bin/env python3" > main.py
        echo "import json" >> main.py
        echo "import os" >> main.py
        echo "import sys" >> main.py
        echo "import logging" >> main.py
        echo "from datetime import datetime" >> main.py
        echo "" >> main.py
        echo "# Setup logging" >> main.py
        echo "logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')" >> main.py
        echo "logger = logging.getLogger(__name__)" >> main.py
        echo "" >> main.py
        echo "def main():" >> main.py
        echo "    try:" >> main.py
        echo "        logger.info(f\"💰 Signal Bot started at {datetime.now()}\")" >> main.py
        echo "" >> main.py
        echo "        # Import and initialize components" >> main.py
        echo "        from services.coinex_api import CoinExAPI" >> main.py
        echo "        from services.telegram_bot import TelegramBot" >> main.py
        echo "        from strategies.mutanabby_strategy import MutanabbyStrategy" >> main.py
        echo "" >> main.py
        echo "        api = CoinExAPI()" >> main.py
        echo "        telegram_bot = TelegramBot()" >> main.py
        echo "        " >> main.py
        echo "        # Initialize strategy" >> main.py
        echo "        try:" >> main.py
        echo "            strategy = MutanabbyStrategy(api)" >> main.py
        echo "            logger.info(\"✅ Strategy initialized with API\")" >> main.py
        echo "        except TypeError:" >> main.py
        echo "            strategy = MutanabbyStrategy()" >> main.py
        echo "            logger.info(\"✅ Strategy initialized without API\")" >> main.py
        echo "" >> main.py
        echo "        logger.info(\"✅ All components initialized\")" >> main.py
        echo "" >> main.py
        echo "        # Execute strategy with proper data handling" >> main.py
        echo "        logger.info(\"🔍 Analyzing market conditions...\")" >> main.py
        echo "        " >> main.py
        echo "        signals = None" >> main.py
        echo "        " >> main.py
        echo "        # Get market data and handle different formats" >> main.py
        echo "        market_data = api.get_market_data('BTCUSDT')" >> main.py
        echo "        logger.info(f\"Market data type: {type(market_data)}\")" >> main.py
        echo "        " >> main.py
        echo "        # Handle different API response formats" >> main.py
        echo "        if isinstance(market_data, dict) and 'data' in market_data:" >> main.py
        echo "            # Format: {'data': actual_data}" >> main.py
        echo "            actual_data = market_data['data']" >> main.py
        echo "            logger.info(f\"Using 'data' key from response, type: {type(actual_data)}\")" >> main.py
        echo "            market_data = actual_data" >> main.py
        echo "        elif isinstance(market_data, dict) and 'result' in market_data:" >> main.py
        echo "            # Format: {'result': actual_data}" >> main.py
        echo "            actual_data = market_data['result']" >> main.py
        echo "            logger.info(f\"Using 'result' key from response, type: {type(actual_data)}\")" >> main.py
        echo "            market_data = actual_data" >> main.py
        echo "        " >> main.py
        echo "        # Try to generate signals with proper data" >> main.py
        echo "        if hasattr(strategy, 'generate_signals'):" >> main.py
        echo "            try:" >> main.py
        echo "                signals = strategy.generate_signals(market_data)" >> main.py
        echo "                logger.info(\"✅ generate_signals executed successfully\")" >> main.py
        echo "            except Exception as e:" >> main.py
        echo "                logger.warning(f\"⚠ generate_signals failed: {e}\")" >> main.py
        echo "                logger.info(\"Trying alternative approach...\")" >> main.py
        echo "                " >> main.py
        echo "                # اگر داده list است، اولین آیتم را بگیریم" >> main.py
        echo "                if isinstance(market_data, list) and len(market_data) > 0:" >> main.py
        echo "                    try:" >> main.py
        echo "                        signals = strategy.generate_signals(market_data[0])" >> main.py
                        echo "                        logger.info(\"✅ generate_signals with first list item executed\")" >> main.py
        echo "                    except Exception as e2:" >> main.py
        echo "                        logger.warning(f\"⚠ generate_signals with first item also failed: {e2}\")" >> main.py
        echo "        " >> main.py
        echo "        # Try other methods if still no signals" >> main.py
        echo "        if signals is None:" >> main.py
        echo "            real_methods = ['execute', 'run', 'analyze', 'get_signals']" >> main.py
        echo "            for method_name in real_methods:" >> main.py
        echo "                if hasattr(strategy, method_name):" >> main.py
        echo "                    try:" >> main.py
        echo "                        method = getattr(strategy, method_name)" >> main.py
        echo "                        signals = method()" >> main.py
        echo "                        logger.info(f\"✅ Method executed: {method_name}\")" >> main.py
        echo "                        break" >> main.py
        echo "                    except Exception as e:" >> main.py
        echo "                        logger.warning(f\"⚠ Method {method_name} failed: {e}\")" >> main.py
        echo "        " >> main.py
        echo "        # ONLY create test signal if in test mode" >> main.py
        echo "        if signals is None and '--test' in sys.argv:" >> main.py
        echo "            logger.warning(\"⚠ No real signals found, creating TEST signal\")" >> main.py
        echo "            signals = [" >> main.py
        echo "                {" >> main.py
        echo "                    'symbol': 'BTCUSDT'," >> main.py
        echo "                    'action': 'BUY'," >> main.py
        echo "                    'price': 50000," >> main.py
        echo "                    'timestamp': datetime.now().isoformat()," >> main.py
        echo "                    'confidence': 0.8," >> main.py
        echo "                    'message': 'TEST SIGNAL - Bullish pattern detected'" >> main.py
        echo "                }" >> main.py
        echo "            ]" >> main.py
        echo "        elif signals is None:" >> main.py
        echo "            logger.info(\"📭 No signals found\")" >> main.py
        echo "            return True" >> main.py
        echo "" >> main.py
        echo "        if signals and len(signals) > 0:" >> main.py
        echo "            logger.info(f\"🎯 Found {len(signals)} signals\")" >> main.py
        echo "            " >> main.py
        echo "            # Send signals via Telegram" >> main.py
        echo "            if '--test' not in sys.argv:" >> main.py
        echo "                telegram_methods = ['send_signals', 'send_message', 'send_signal', 'notify']" >> main.py
        echo "                sent = False" >> main.py
        echo "                for method_name in telegram_methods:" >> main.py
        echo "                    if hasattr(telegram_bot, method_name):" >> main.py
        echo "                        try:" >> main.py
        echo "                            method = getattr(telegram_bot, method_name)" >> main.py
        echo "                            method(signals)" >> main.py
        echo "                            logger.info(f\"📤 Signals sent via {method_name}\")" >> main.py
        echo "                            sent = True" >> main.py
        echo "                            break" >> main.py
        echo "                        except Exception as e:" >> main.py
        echo "                            logger.warning(f\"⚠ Telegram method {method_name} failed: {e}\")" >> main.py
        echo "                " >> main.py
        echo "                if not sent:" >> main.py
        echo "                    logger.error(\"❌ No working Telegram method found\")" >> main.py
        echo "            else:" >> main.py
        echo "                logger.info(\"🧪 Test mode - Signals not sent\")" >> main.py
        echo "                for signal in signals:" >> main.py
        echo "                    logger.info(f\"TEST SIGNAL: {signal}\")" >> main.py
        echo "        else:" >> main.py
        echo "            logger.info(\"📭 No signals found\")" >> main.py
        echo "" >> main.py
        echo "        return True" >> main.py
        echo "" >> main.py
        echo "    except Exception as e:" >> main.py
        echo "        logger.error(f\"❌ Error in main execution: {e}\")" >> main.py
        echo "        import traceback" >> main.py
        echo "        logger.error(traceback.format_exc())" >> main.py
        echo "        return False" >> main.py
        echo "" >> main.py
        echo "if __name__ == \"__main__\":" >> main.py
        echo "    success = main()" >> main.py
        echo "    sys.exit(0 if success else 1)" >> main.py

        echo "Fixed main.py created successfully"

    - name: Run Signal Bot
      env:
        COINEX_ACCESS_ID: ${{ secrets.COINEX_ACCESS_ID }}
        COINEX_SECRET_KEY: ${{ secrets.COINEX_SECRET_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
      run: |
        echo "=== Starting Signal Bot ==="
        echo "Telegram Token: ${TELEGRAM_BOT_TOKEN:0:10}..."
        echo "Telegram Chat ID: $TELEGRAM_CHAT_ID"
        echo "Test Mode: $TEST_MODE"
        
        if [ "$TEST_MODE" = "true" ]; then
            echo "🟡 Running in TEST mode - Test signals will be created but not sent"
            python main.py --test
        else
            echo "🟢 Running in PRODUCTION mode - Only real signals will be processed"
            python main.py
        fi

    - name: Send completion notification
      if: always()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_WORKFLOW: ${{ github.workflow }}
      run: |
        echo "=== Sending Completion Notification ==="
        
        mkdir -p .github/scripts
        
        echo "import requests" > .github/scripts/notify.py
        echo "import os" >> .github/scripts/notify.py
        echo "from datetime import datetime" >> .github/scripts/notify.py
        echo "" >> .github/scripts/notify.py
        echo "def send_notification():" >> .github/scripts/notify.py
        echo "    token = os.getenv('TELEGRAM_BOT_TOKEN')" >> .github/scripts/notify.py
        echo "    chat_id = os.getenv('TELEGRAM_CHAT_ID')" >> .github/scripts/notify.py
        echo "" >> .github/scripts/notify.py
        echo "    if not token or not chat_id:" >> .github/scripts/notify.py
        echo "        print('Telegram credentials missing')" >> .github/scripts/notify.py
        echo "        return False" >> .github/scripts/notify.py
        echo "" >> .github/scripts/notify.py
        echo "    workflow = os.getenv('GITHUB_WORKFLOW', 'Unknown')" >> .github/scripts/notify.py
        echo "    run_id = os.getenv('GITHUB_RUN_ID', 'Unknown')" >> .github/scripts/notify.py
        echo "    repo = os.getenv('GITHUB_REPOSITORY', 'Unknown')" >> .github/scripts/notify.py
        echo "" >> .github/scripts/notify.py
        echo "    status = 'Success'" >> .github/scripts/notify.py
        echo "" >> .github/scripts/notify.py
        echo "    message = f\"\"\"" >> .github/scripts/notify.py
        echo "🤖 <b>Signal Bot Execution Completed</b>" >> .github/scripts/notify.py
        echo "" >> .github/scripts/notify.py
        echo "📊 <b>Workflow:</b> {workflow}" >> .github/scripts/notify.py
        echo "🏷️ <b>Run ID:</b> #{run_id}" >> .github/scripts/notify.py
        echo "📁 <b>Repository:</b> {repo}" >> .github/scripts/notify.py
        echo "⏰ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}" >> .github/scripts/notify.py
        echo "✅ <b>Status:</b> {status}" >> .github/scripts/notify.py
        echo "" >> .github/scripts/notify.py
        echo "🔗 <a href=\\\"https://github.com/{repo}/actions/runs/{run_id}\\\">View Details</a>" >> .github/scripts/notify.py
        echo "    \"\"\"" >> .github/scripts/notify.py
        echo "" >> .github/scripts/notify.py
        echo "    url = f\"https://api.telegram.org/bot{token}/sendMessage\"" >> .github/scripts/notify.py
        echo "    payload = {" >> .github/scripts/notify.py
        echo "        'chat_id': chat_id," >> .github/scripts/notify.py
        echo "        'text': message," >> .github/scripts/notify.py
        echo "        'parse_mode': 'HTML'," >> .github/scripts/notify.py
        echo "        'disable_web_page_preview': True" >> .github/scripts/notify.py
        echo "    }" >> .github/scripts/notify.py
        echo "" >> .github/scripts/notify.py
        echo "    try:" >> .github/scripts/notify.py
        echo "        response = requests.post(url, json=payload, timeout=10)" >> .github/scripts/notify.py
        echo "        return response.status_code == 200" >> .github/scripts/notify.py
        echo "    except Exception:" >> .github/scripts/notify.py
        echo "        return False" >> .github/scripts/notify.py
        echo "" >> .github/scripts/notify.py
        echo "if __name__ == \"__main__\":" >> .github/scripts/notify.py
        echo "    send_notification()" >> .github/scripts/notify.py
        
        python .github/scripts/notify.py

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Final cleanup
      run: |
        echo "🤖 Signal Bot workflow completed"
        echo "⏰ Time: $(date)"
        echo "🆔 Run ID: ${{ github.run_id }}"
