name: CoinEx Signal Bot with Debug

on:
  schedule:
    - cron: '*/15 * * * *'  # هر 15 دقیقه اجرا شود
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      test_mode:
        description: 'Enable test mode (no signals sent)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      comprehensive_test:
        description: 'Run comprehensive debug test'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  run-signal-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests python-dotenv

    - name: Analyze project structure
      run: |
        echo "=== Analyzing Project Structure ==="
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        echo "Services directory content:"
        ls -la services/
        
        echo "Debug service content:"
        if [ -d "services/debug_service" ]; then
            ls -la services/debug_service/
            echo "Creating __init__.py for debug_service package"
            touch services/debug_service/__init__.py
        else
            echo "debug_service is not a directory, checking if it's a file..."
            if [ -f "services/debug_service.py" ]; then
                echo "debug_service.py exists"
            else
                echo "Neither debug_service directory nor debug_service.py file exists!"
            fi
        fi

    - name: Fix debug_service import issue
      run: |
        echo "=== Fixing Import Issues ==="
        
        # اگر debug_service یک پوشه است، مطمئن شویم که فایل اصلی دارد
        if [ -d "services/debug_service" ]; then
            echo "Debug service is a package directory"
            
            # بررسی وجود فایل اصلی در پوشه debug_service
            if [ ! -f "services/debug_service/debug_service.py" ]; then
                echo "Creating main debug service file"
                cat > services/debug_service/debug_service.py << 'EOF'
                # Debug Service Module
                def debug_function():
                    print("Debug service is working!")
                    return True
                
                class DebugService:
                    def __init__(self):
                        self.name = "DebugService"
                    
                    def run_debug(self):
                        print("Running debug service")
                        return {"status": "success"}
                EOF
            fi
        else
            # اگر فایل debug_service.py وجود ندارد، ایجادش کن
            if [ ! -f "services/debug_service.py" ]; then
                echo "Creating debug_service.py file"
                cat > services/debug_service.py << 'EOF'
                # Debug Service Module
                def debug_function():
                    print("Debug service is working!")
                    return True
                
                class DebugService:
                    def __init__(self):
                        self.name = "DebugService"
                    
                    def run_debug(self):
                        print("Running debug service")
                        return {"status": "success"}
                EOF
            fi
        fi

    - name: Test basic functionality
      run: |
        echo "=== Testing Basic Functionality ==="
        
        # تست ایمپورت‌های اصلی
        echo "Testing core imports..."
        python -c "
        try:
            from services.coinex_api import CoinExAPI
            print('✓ CoinExAPI imported successfully')
        except Exception as e:
            print(f'✗ CoinExAPI import failed: {e}')
        
        try:
            from services.telegram_bot import TelegramBot
            print('✓ TelegramBot imported successfully')
        except Exception as e:
            print(f'✗ TelegramBot import failed: {e}')
        
        try:
            # تست ایمپورت debug_service به دو روش مختلف
            try:
                from services.debug_service import debug_function
                print('✓ debug_service imported successfully (direct)')
            except:
                from services import debug_service
                print('✓ debug_service imported successfully (module)')
        except Exception as e:
            print(f'✗ debug_service import failed: {e}')
            print('Creating minimal debug service...')
        "

    - name: Create minimal main.py if needed
      run: |
        echo "=== Ensuring main.py works ==="
        
        # بررسی وجود main.py و درست بودن آن
        if [ ! -f "main.py" ]; then
            echo "Creating minimal main.py"
            cat > main.py << 'EOF'
            #!/usr/bin/env python3
            import os
            import sys
            from datetime import datetime
            
            def main():
                print(f"Signal Bot started at {datetime.now()}")
                
                # تست ایمپورت‌های اصلی
                try:
                    from services.coinex_api import CoinExAPI
                    print("✓ CoinExAPI loaded")
                except ImportError as e:
                    print(f"✗ CoinExAPI import error: {e}")
                
                try:
                    from services.telegram_bot import TelegramBot
                    print("✓ TelegramBot loaded")
                except ImportError as e:
                    print(f"✗ TelegramBot import error: {e}")
                
                print("Basic functionality test completed")
                return True
            
            if __name__ == "__main__":
                if '--test' in sys.argv or '--debug' in sys.argv:
                    print("Running in test/debug mode")
                main()
            EOF
        fi

    - name: Run Signal Bot
      env:
        COINEX_ACCESS_ID: ${{ secrets.COINEX_ACCESS_ID }}
        COINEX_SECRET_KEY: ${{ secrets.COINEX_SECRET_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || 'dummy_token' }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID || 'dummy_chat_id' }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
        COMPREHENSIVE_TEST: ${{ github.event.inputs.comprehensive_test }}
      run: |
        echo "=== Starting Signal Bot ==="
        echo "Debug Mode: $DEBUG_MODE"
        echo "Test Mode: $TEST_MODE"
        echo "Comprehensive Test: $COMPREHENSIVE_TEST"
        
        # بررسی وجود توکن تلگرام
        if [ "$TELEGRAM_BOT_TOKEN" = "dummy_token" ] || [ "$TELEGRAM_CHAT_ID" = "dummy_chat_id" ]; then
            echo "⚠ Warning: Telegram credentials not set in secrets"
            echo "Telegram notifications will be disabled"
        fi
        
        # اجرای اصلی
        if [ "$COMPREHENSIVE_TEST" = "true" ] && [ -f "debug_mode.py" ]; then
            echo "Running comprehensive debug test..."
            python debug_mode.py --comprehensive --verbose
        elif [ "$DEBUG_MODE" = "true" ]; then
            echo "Running in debug mode..."
            python main.py --debug --test
        elif [ "$TEST_MODE" = "true" ]; then
            echo "Running in test mode..."
            python main.py --test
        else
            echo "Running in production mode..."
            python main.py
        fi

    - name: Check Telegram credentials
      id: check-telegram
      run: |
        # بررسی وجود secrets تلگرام
        if [ "${{ secrets.TELEGRAM_BOT_TOKEN }}" != "" ] && [ "${{ secrets.TELEGRAM_CHAT_ID }}" != "" ]; then
            echo "has_telegram_creds=true" >> $GITHUB_OUTPUT
        else
            echo "has_telegram_creds=false" >> $GITHUB_OUTPUT
        fi
        echo "Telegram credentials available: ${{ steps.check-telegram.outputs.has_telegram_creds }}"

    - name: Send workflow status to Telegram
      if: always() && steps.check-telegram.outputs.has_telegram_creds == 'true'
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_WORKFLOW: ${{ github.workflow }}
      run: |
        echo "=== Sending Telegram Notification ==="
        
        # ایجاد پوشه scripts اگر وجود ندارد
        mkdir -p .github/scripts
        
        cat > .github/scripts/notify_workflow_status.py << 'EOF'
        import requests
        import os
        from datetime import datetime
        
        def send_workflow_status():
            telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
            chat_id = os.getenv('TELEGRAM_CHAT_ID')
            
            if not telegram_token or not chat_id:
                print("Telegram credentials not found")
                return False
            
            workflow_name = os.getenv('GITHUB_WORKFLOW', 'Unknown')
            run_id = os.getenv('GITHUB_RUN_ID', 'Unknown')
            repository = os.getenv('GITHUB_REPOSITORY', 'Unknown')
            
            # تشخیص وضعیت اجرا
            success = "success" if os.getenv('ACTIONS_STEP_STATUS', '') == 'success' else "failed"
            
            message = f"""
        🔄 <b>Workflow Status Update</b>
        
        📊 <b>Workflow:</b> {workflow_name}
        🏷️ <b>Run ID:</b> #{run_id}
        📁 <b>Repository:</b> {repository}
        ⏰ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        ✅ <b>Status:</b> {success}
        
        🔗 <a href="https://github.com/{repository}/actions/runs/{run_id}">View Details</a>
            """
            
            url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
            payload = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            try:
                response = requests.post(url, json=payload, timeout=10)
                if response.status_code == 200:
                    print("✓ Workflow status sent to Telegram")
                    return True
                else:
                    print(f"✗ Failed to send status: {response.text}")
                    return False
            except Exception as e:
                print(f"✗ Error sending workflow status: {e}")
                return False
        
        if __name__ == "__main__":
            send_workflow_status()
        EOF
        
        python .github/scripts/notify_workflow_status.py

    - name: Upload debug reports
      if: always() && (github.event.inputs.debug_mode == 'true' || github.event.inputs.comprehensive_test == 'true')
      uses: actions/upload-artifact@v4
      with:
        name: debug-reports-${{ github.run_id }}
        path: |
          debug/
          logs/
        retention-days: 7

  cleanup:
    runs-on: ubuntu-latest
    needs: run-signal-bot
    if: always()
    
    steps:
    - name: Cleanup and final report
      run: |
        echo "=== Workflow Completed ==="
        echo "Time: $(date)"
        echo "Run ID: ${{ github.run_id }}"
        echo "Repository: ${{ github.repository }}"
