name: CoinEx Signal Bot with Debug

on:
  schedule:
    - cron: '*/15 * * * *'  # هر 15 دقیقه اجرا شود
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      test_mode:
        description: 'Enable test mode (no signals sent)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      comprehensive_test:
        description: 'Run comprehensive debug test'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  run-signal-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Create directories
      run: |
        mkdir -p logs
        mkdir -p debug/debug_reports
        mkdir -p debug/historical_signals
        mkdir -p .github/scripts

    - name: Run basic syntax check
      run: |
        echo "Checking Python syntax..."
        # بررسی سینتکس فایل‌های اصلی
        python -m py_compile main.py debug_mode.py || echo "Syntax errors found in main files"
        find services -name "*.py" -exec python -m py_compile {} \; || echo "Syntax errors found in services"
        find strategies -name "*.py" -exec python -m py_compile {} \; || echo "Syntax errors found in strategies"
        find utils -name "*.py" -exec python -m py_compile {} \; || echo "Syntax errors found in utils"

    - name: Run Signal Bot
      env:
        COINEX_ACCESS_ID: ${{ secrets.COINEX_ACCESS_ID }}
        COINEX_SECRET_KEY: ${{ secrets.COINEX_SECRET_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
        COMPREHENSIVE_TEST: ${{ github.event.inputs.comprehensive_test }}
      run: |
        echo "Starting Signal Bot..."
        echo "Debug Mode: $DEBUG_MODE"
        echo "Test Mode: $TEST_MODE"
        echo "Comprehensive Test: $COMPREHENSIVE_TEST"
        
        # بررسی ساختار فایل‌ها
        echo "Checking file structure..."
        ls -la
        echo "Services directory:"
        ls -la services/ || echo "Services directory not found"
        echo "Strategies directory:"
        ls -la strategies/ || echo "Strategies directory not found"
        echo "Utils directory:"
        ls -la utils/ || echo "Utils directory not found"
        
        if [ "$COMPREHENSIVE_TEST" = "true" ]; then
          echo "Running comprehensive debug test..."
          python debug_mode.py --comprehensive --verbose
        elif [ "$DEBUG_MODE" = "true" ]; then
          echo "Running in debug mode..."
          python main.py --debug --test
        elif [ "$TEST_MODE" = "true" ]; then
          echo "Running in test mode..."
          python main.py --test
        else
          echo "Running in production mode..."
          python main.py
        fi

    - name: Upload debug reports
      if: always() && (github.event.inputs.debug_mode == 'true' || github.event.inputs.comprehensive_test == 'true')
      uses: actions/upload-artifact@v4
      with:
        name: debug-reports-${{ github.run_id }}
        path: |
          debug/
          logs/
        retention-days: 7

    - name: Send workflow status to Telegram
      if: always()
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_WORKFLOW: ${{ github.workflow }}
      run: |
        # ایجاد اسکریپت اطلاع‌رسانی
        cat > .github/scripts/notify_workflow_status.py << 'EOF'
        import requests
        import os
        import json
        from datetime import datetime
        
        def send_workflow_status():
            telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
            chat_id = os.getenv('TELEGRAM_CHAT_ID')
            
            if not telegram_token or not chat_id:
                print("Telegram credentials not found")
                return
            
            workflow_name = os.getenv('GITHUB_WORKFLOW', 'Unknown')
            run_id = os.getenv('GITHUB_RUN_ID', 'Unknown')
            repository = os.getenv('GITHUB_REPOSITORY', 'Unknown')
            
            message = f"""
        🔄 <b>Workflow Status Update</b>
        
        📊 <b>Workflow:</b> {workflow_name}
        🏷️ <b>Run ID:</b> #{run_id}
        📁 <b>Repository:</b> {repository}
        ⏰ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        ✅ <b>Status:</b> Completed
        
        🔗 <a href="https://github.com/{repository}/actions/runs/{run_id}">View Workflow Run</a>
            """
            
            url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
            payload = {
                'chat_id': chat_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }
            
            try:
                response = requests.post(url, json=payload, timeout=10)
                if response.status_code == 200:
                    print("Workflow status sent to Telegram")
                else:
                    print(f"Failed to send status: {response.text}")
            except Exception as e:
                print(f"Error sending workflow status: {e}")
        
        if __name__ == "__main__":
            send_workflow_status()
        EOF
        
        # اجرای اسکریپت
        python .github/scripts/notify_workflow_status.py

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Cleanup
      run: |
        echo "Workflow completed"
