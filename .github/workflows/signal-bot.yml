name: CoinEx Signal Bot with Debug

on:
  schedule:
    - cron: '*/15 * * * *'  # هر 15 دقیقه اجرا شود
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug mode'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      test_mode:
        description: 'Enable test mode (no signals sent)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
      comprehensive_test:
        description: 'Run comprehensive debug test'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  run-signal-bot:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install requests python-dotenv

    - name: Fix main.py issues
      run: |
        echo "=== Fixing main.py issues ==="
        
        # بررسی و رفع خطاهای main.py
        if [ -f "main.py" ]; then
            echo "Backing up original main.py"
            cp main.py main.py.backup
            
            # اضافه کردن import json اگر وجود ندارد
            if ! grep -q "import json" main.py; then
                echo "Adding json import to main.py"
                sed -i '1s/^/import json\n/' main.py
            fi
            
            # رفع خطای TypeError برای results
            echo "Fixing results handling in main.py"
            sed -i 's/logger.info(f"Execution completed. Found \[results\['"'"'total_signals'"'"']\] signals")/if results and isinstance(results, dict):\n        logger.info(f"Execution completed. Found {results.get(\"total_signals\", 0)} signals")\n    else:\n        logger.info("Execution completed. No results returned")/' main.py
            
            # نمایش تغییرات اعمال شده
            echo "Changes applied to main.py:"
            head -n 5 main.py
            echo "..."
            tail -n 10 main.py
        else
            echo "main.py not found, creating a fixed version"
            echo "import json" > main.py
            echo "import os" >> main.py
            echo "import sys" >> main.py
            echo "import logging" >> main.py
            echo "from datetime import datetime" >> main.py
            echo "from services.coinex_api import CoinExAPI" >> main.py
            echo "from services.telegram_bot import TelegramBot" >> main.py
            echo "from strategies.mutanabby_strategy import MutanabbyStrategy" >> main.py
            echo "from utils.performance_monitor import measure_performance" >> main.py
            echo "from utils.error_handler import setup_error_handling" >> main.py
            echo "" >> main.py
            echo "# Setup logging" >> main.py
            echo "logging.basicConfig(level=logging.INFO)" >> main.py
            echo "logger = logging.getLogger(__name__)" >> main.py
            echo "" >> main.py
            echo "def main():" >> main.py
            echo "    try:" >> main.py
            echo "        logger.info(f\"Signal Bot started at {datetime.now()}\")" >> main.py
            echo "        " >> main.py
            echo "        # Initialize components" >> main.py
            echo "        api = CoinExAPI()" >> main.py
            echo "        telegram_bot = TelegramBot()" >> main.py
            echo "        strategy = MutanabbyStrategy()" >> main.py
            echo "        " >> main.py
            echo "        # Run strategy" >> main.py
            echo "        results = strategy.execute()" >> main.py
            echo "        " >> main.py
            echo "        if results and isinstance(results, dict):" >> main.py
            echo "            logger.info(f\"Execution completed. Found {results.get('total_signals', 0)} signals\")" >> main.py
            echo "        else:" >> main.py
            echo "            logger.info(\"Execution completed. No results returned\")" >> main.py
            echo "        " >> main.py
            echo "        return True" >> main.py
            echo "    " >> main.py
            echo "    except Exception as e:" >> main.py
            echo "        logger.error(f\"Error in main execution: {e}\")" >> main.py
            echo "        return False" >> main.py
            echo "" >> main.py
            echo "if __name__ == \"__main__\":" >> main.py
            echo "    if '--test' in sys.argv or '--debug' in sys.argv:" >> main.py
            echo "        print(\"Running in test/debug mode\")" >> main.py
            echo "    success = main()" >> main.py
            echo "    sys.exit(0 if success else 1)" >> main.py
        fi

    - name: Test basic functionality
      run: |
        echo "=== Testing Basic Functionality ==="
        
        # تست ایمپورت‌های اصلی
        echo "Testing core imports..."
        python -c "
        try:
            import json
            print('✓ json imported successfully')
        except Exception as e:
            print(f'✗ json import failed: {e}')
        
        try:
            from services.coinex_api import CoinExAPI
            print('✓ CoinExAPI imported successfully')
        except Exception as e:
            print(f'✗ CoinExAPI import failed: {e}')
        
        try:
            from services.telegram_bot import TelegramBot
            print('✓ TelegramBot imported successfully')
        except Exception as e:
            print(f'✗ TelegramBot import failed: {e}')
        
        try:
            from strategies.mutanabby_strategy import MutanabbyStrategy
            print('✓ MutanabbyStrategy imported successfully')
        except Exception as e:
            print(f'✗ MutanabbyStrategy import failed: {e}')
        "

    - name: Run Signal Bot
      env:
        COINEX_ACCESS_ID: ${{ secrets.COINEX_ACCESS_ID }}
        COINEX_SECRET_KEY: ${{ secrets.COINEX_SECRET_KEY }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN || 'dummy_token' }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID || 'dummy_chat_id' }}
        DEBUG_MODE: ${{ github.event.inputs.debug_mode }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
        COMPREHENSIVE_TEST: ${{ github.event.inputs.comprehensive_test }}
      run: |
        echo "=== Starting Signal Bot ==="
        echo "Debug Mode: $DEBUG_MODE"
        echo "Test Mode: $TEST_MODE"
        echo "Comprehensive Test: $COMPREHENSIVE_TEST"
        
        # بررسی وجود توکن تلگرام
        if [ "$TELEGRAM_BOT_TOKEN" = "dummy_token" ] || [ "$TELEGRAM_CHAT_ID" = "dummy_chat_id" ]; then
            echo "⚠ Warning: Telegram credentials not set in secrets"
            echo "Telegram notifications will be disabled"
        fi
        
        # اجرای اصلی با مدیریت خطا
        set +e  # غیرفعال کردن fail on error
        
        if [ "$COMPREHENSIVE_TEST" = "true" ] && [ -f "debug_mode.py" ]; then
            echo "Running comprehensive debug test..."
            python debug_mode.py --comprehensive --verbose
        elif [ "$DEBUG_MODE" = "true" ]; then
            echo "Running in debug mode..."
            python main.py --debug --test
        elif [ "$TEST_MODE" = "true" ]; then
            echo "Running in test mode..."
            python main.py --test
        else
            echo "Running in production mode..."
            python main.py
        fi
        
        exit_code=$?
        echo "Process exited with code: $exit_code"
        
        set -e  # فعال کردن مجدد fail on error

    - name: Check Telegram credentials
      id: check-telegram
      run: |
        # بررسی وجود secrets تلگرام
        if [ "${{ secrets.TELEGRAM_BOT_TOKEN }}" != "" ] && [ "${{ secrets.TELEGRAM_CHAT_ID }}" != "" ]; then
            echo "has_telegram_creds=true" >> $GITHUB_OUTPUT
        else
            echo "has_telegram_creds=false" >> $GITHUB_OUTPUT
        fi
        echo "Telegram credentials available: ${{ steps.check-telegram.outputs.has_telegram_creds }}"

    - name: Send workflow status to Telegram
      if: always() && steps.check-telegram.outputs.has_telegram_creds == 'true'
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GITHUB_RUN_ID: ${{ github.run_id }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_WORKFLOW: ${{ github.workflow }}
      run: |
        echo "=== Sending Telegram Notification ==="
        
        # ایجاد پوشه scripts اگر وجود ندارد
        mkdir -p .github/scripts
        
        # ایجاد فایل پایتون برای اطلاع‌رسانی
        echo "import requests" > .github/scripts/notify_workflow_status.py
        echo "import os" >> .github/scripts/notify_workflow_status.py
        echo "from datetime import datetime" >> .github/scripts/notify_workflow_status.py
        echo "" >> .github/scripts/notify_workflow_status.py
        echo "def send_workflow_status():" >> .github/scripts/notify_workflow_status.py
        echo "    telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')" >> .github/scripts/notify_workflow_status.py
        echo "    chat_id = os.getenv('TELEGRAM_CHAT_ID')" >> .github/scripts/notify_workflow_status.py
        echo "" >> .github/scripts/notify_workflow_status.py
        echo "    if not telegram_token or not chat_id:" >> .github/scripts/notify_workflow_status.py
        echo "        print('Telegram credentials not found')" >> .github/scripts/notify_workflow_status.py
        echo "        return False" >> .github/scripts/notify_workflow_status.py
        echo "" >> .github/scripts/notify_workflow_status.py
        echo "    workflow_name = os.getenv('GITHUB_WORKFLOW', 'Unknown')" >> .github/scripts/notify_workflow_status.py
        echo "    run_id = os.getenv('GITHUB_RUN_ID', 'Unknown')" >> .github/scripts/notify_workflow_status.py
        echo "    repository = os.getenv('GITHUB_REPOSITORY', 'Unknown')" >> .github/scripts/notify_workflow_status.py
        echo "" >> .github/scripts/notify_workflow_status.py
        echo "    # تشخیص وضعیت اجرا" >> .github/scripts/notify_workflow_status.py
        echo "    success = 'success'" >> .github/scripts/notify_workflow_status.py
        echo "" >> .github/scripts/notify_workflow_status.py
        echo "    message = f'''" >> .github/scripts/notify_workflow_status.py
        echo "🔄 <b>Workflow Status Update</b>" >> .github/scripts/notify_workflow_status.py
        echo "" >> .github/scripts/notify_workflow_status.py
        echo "📊 <b>Workflow:</b> {workflow_name}" >> .github/scripts/notify_workflow_status.py
        echo "🏷️ <b>Run ID:</b> #{run_id}" >> .github/scripts/notify_workflow_status.py
        echo "📁 <b>Repository:</b> {repository}" >> .github/scripts/notify_workflow_status.py
        echo "⏰ <b>Time:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}" >> .github/scripts/notify_workflow_status.py
        echo "✅ <b>Status:</b> {success}" >> .github/scripts/notify_workflow_status.py
        echo "" >> .github/scripts/notify_workflow_status.py
        echo "🔗 <a href=\"https://github.com/{repository}/actions/runs/{run_id}\">View Details</a>" >> .github/scripts/notify_workflow_status.py
        echo "    '''" >> .github/scripts/notify_workflow_status.py
        echo "" >> .github/scripts/notify_workflow_status.py
        echo "    url = f'https://api.telegram.org/bot{telegram_token}/sendMessage'" >> .github/scripts/notify_workflow_status.py
        echo "    payload = {" >> .github/scripts/notify_workflow_status.py
        echo "        'chat_id': chat_id," >> .github/scripts/notify_workflow_status.py
        echo "        'text': message," >> .github/scripts/notify_workflow_status.py
        echo "        'parse_mode': 'HTML'," >> .github/scripts/notify_workflow_status.py
        echo "        'disable_web_page_preview': True" >> .github/scripts/notify_workflow_status.py
        echo "    }" >> .github/scripts/notify_workflow_status.py
        echo "" >> .github/scripts/notify_workflow_status.py
        echo "    try:" >> .github/scripts/notify_workflow_status.py
        echo "        response = requests.post(url, json=payload, timeout=10)" >> .github/scripts/notify_workflow_status.py
        echo "        if response.status_code == 200:" >> .github/scripts/notify_workflow_status.py
        echo "            print('Workflow status sent to Telegram')" >> .github/scripts/notify_workflow_status.py
        echo "            return True" >> .github/scripts/notify_workflow_status.py
        echo "        else:" >> .github/scripts/notify_workflow_status.py
        echo "            print(f'Failed to send status: {response.text}')" >> .github/scripts/notify_workflow_status.py
        echo "            return False" >> .github/scripts/notify_workflow_status.py
        echo "    except Exception as e:" >> .github/scripts/notify_workflow_status.py
        echo "        print(f'Error sending workflow status: {e}')" >> .github/scripts/notify_workflow_status.py
        echo "        return False" >> .github/scripts/notify_workflow_status.py
        echo "" >> .github/scripts/notify_workflow_status.py
        echo "if __name__ == '__main__':" >> .github/scripts/notify_workflow_status.py
        echo "    send_workflow_status()" >> .github/scripts/notify_workflow_status.py
        
        python .github/scripts/notify_workflow_status.py

    - name: Upload debug reports
      if: always() && (github.event.inputs.debug_mode == 'true' || github.event.inputs.comprehensive_test == 'true')
      uses: actions/upload-artifact@v4
      with:
        name: debug-reports-${{ github.run_id }}
        path: |
          debug/
          logs/
        retention-days: 7

  cleanup:
    runs-on: ubuntu-latest
    needs: run-signal-bot
    if: always()
    
    steps:
    - name: Cleanup and final report
      run: |
        echo "=== Workflow Completed ==="
        echo "Time: $(date)"
        echo "Run ID: ${{ github.run_id }}"
        echo "Repository: ${{ github.repository }}"
